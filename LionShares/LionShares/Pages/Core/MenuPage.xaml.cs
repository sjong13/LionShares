using LionShares.Localization;
using LionShares.Models;
using LionShares.ViewModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Xamarin.Forms;

namespace LionShares.Pages
{
    public partial class MenuPage : ContentPage
    {
        #region // Fields
        private RootPage _root;
        private List<NavigationItem> _items;
        private Type _defaultPageType;
        #endregion

        #region // Constructor
        public MenuPage(RootPage root, Type defaultPageType = null)
        {
            InitializeComponent();

            // initialize
            _root = root;
            _defaultPageType = defaultPageType;

            // set context
            BindingContext = new BaseViewModel(Navigation)
            {
                Title = TextResources.AppNameText
            };

            // menu
            InitMenu();
            BuildMenu(true);
        }
        protected override void OnAppearing()
        {
            base.OnAppearing();
        }
        #endregion

        private void BuildMenu(bool isInit = false)
        {
            // menu items
            // your landing page must exist in the _items (usually the first one on here)
            // otherwise you will get an error message saying "Master and Detail must be set before adding MasterDetailPage to a container"
            _items = new List<NavigationItem>
            {
                new NavigationItem {Category = TextResources.MenuCategory1Name, MenuTitle = TextResources.Dashboard, PageType = typeof(DashboardPage), ViewModelType = typeof(DashboardViewModel), Icon = FontAwesomeFont.ThLarge },
            };

            // add menu items outside of the constructor (just another example)
            _items.Add(new NavigationItem { Category = TextResources.AppManagement, MenuTitle = TextResources.About, PageType = typeof(AboutPage), ViewModelType = typeof(AboutViewModel), Icon = FontAwesomeFont.Question });

            _items = _items.Select(s => new NavigationItem { Category = s.Category.ToUpper(), MenuTitle = s.MenuTitle, PageType = s.PageType, ViewModelType = s.ViewModelType, PageTitle = s.PageTitle, Id = s.Id, Icon = s.Icon }).ToList();
            var group = _items.GroupBy(m => m.Category);

            // set to binding 
            ListViewMenu.ItemsSource = group;

            // set default selected item
            if (isInit)
                ListViewMenu.SelectedItem = _defaultPageType == null ? _items[0] : _items.Where(i => i.PageType == _defaultPageType).FirstOrDefault();
        }

        public void InitMenu()
        {
            // attach select event
            ListViewMenu.ItemSelected += async (sender, e) =>
            {
                if (ListViewMenu.SelectedItem == null)
                    return;

                // get selected item
                var item = (NavigationItem)e.SelectedItem;

                // navigate
                await _root.NavigateAsync(item.PageType, item.ViewModelType, item.PageTitle);

                // remove selected item
                ListViewMenu.SelectedItem = null;
            };
        }

        #region // Helper methods
        public void AutoGeneratedNavigationItems()
        {
            var fields = this.GetType().GetRuntimeFields();

            var items = fields.Where(x => x.FieldType.Name == "NavigationItem").ToList();
            foreach (var item in items)
            {
                _items.Add(item.GetValue(null) as NavigationItem);
            }
        }
        #endregion
    }
}